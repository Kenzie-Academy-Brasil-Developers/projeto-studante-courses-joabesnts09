[
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "Full",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "AccountView",
        "importPath": "accounts.views",
        "description": "accounts.views",
        "isExtraImport": true,
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework_simplejwt",
        "description": "rest_framework_simplejwt",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "AccountSerializer",
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "isExtraImport": true,
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "baker",
        "importPath": "model_bakery",
        "description": "model_bakery",
        "isExtraImport": true,
        "detail": "model_bakery",
        "documentation": {}
    },
    {
        "label": "baker",
        "importPath": "model_bakery",
        "description": "model_bakery",
        "isExtraImport": true,
        "detail": "model_bakery",
        "documentation": {}
    },
    {
        "label": "baker",
        "importPath": "model_bakery",
        "description": "model_bakery",
        "isExtraImport": true,
        "detail": "model_bakery",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "Content",
        "importPath": "contents.models",
        "description": "contents.models",
        "isExtraImport": true,
        "detail": "contents.models",
        "documentation": {}
    },
    {
        "label": "Content",
        "importPath": "contents.models",
        "description": "contents.models",
        "isExtraImport": true,
        "detail": "contents.models",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "courses.models",
        "description": "courses.models",
        "isExtraImport": true,
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ManyToManyField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ManyToManyRel",
        "importPath": "django.db.models.fields.reverse_related",
        "description": "django.db.models.fields.reverse_related",
        "isExtraImport": true,
        "detail": "django.db.models.fields.reverse_related",
        "documentation": {}
    },
    {
        "label": "StudentCourse",
        "importPath": "students_courses.models",
        "description": "students_courses.models",
        "isExtraImport": true,
        "detail": "students_courses.models",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Account',\n            fields=[\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0002_alter_account_id",
        "description": "accounts.migrations.0002_alter_account_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='account',\n            name='id',\n            field=models.UUIDField(default=uuid.UUID('25a06e5c-8f93-4ff4-985b-ca4631493e39'), editable=False, primary_key=True, serialize=False),\n        ),",
        "detail": "accounts.migrations.0002_alter_account_id",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Account(AbstractUser):\n    id = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4())",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "AccountSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ['id', 'username', 'password', 'email', 'is_superuser']\n        extra_kwargs = {\n            'password': {'write_only': True}\n        }\n    def create(self, validated_data: Account):\n        if validated_data['is_superuser']:\n            return Account.objects.create_superuser(**validated_data)",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('accounts/', AccountView.as_view()),\n    path('login/', views.TokenObtainPairView.as_view()),\n]",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "AccountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccountView(generics.CreateAPIView):\n    queryset = Account.objects.all()\n    serializer_class = AccountSerializer",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "contents.migrations.0001_initial",
        "description": "contents.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Content',\n            fields=[\n                ('id', models.UUIDField(default=uuid.UUID('8e71e44b-8fb8-4700-8b07-438b921a0d19'), editable=False, primary_key=True, serialize=False)),\n                ('name', models.CharField(max_length=150)),",
        "detail": "contents.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "contents.migrations.0002_initial",
        "description": "contents.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contents', '0001_initial'),\n        ('courses', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='content',\n            name='course',",
        "detail": "contents.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "ContentsConfig",
        "kind": 6,
        "importPath": "contents.apps",
        "description": "contents.apps",
        "peekOfCode": "class ContentsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'contents'",
        "detail": "contents.apps",
        "documentation": {}
    },
    {
        "label": "Content",
        "kind": 6,
        "importPath": "contents.models",
        "description": "contents.models",
        "peekOfCode": "class Content(models.Model):\n    id = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4())\n    name = models.CharField(max_length=150)\n    content = models.TextField()\n    video_url = models.CharField(max_length=200)\n    course = models.ForeignKey(\n        \"courses.Course\", on_delete=models.CASCADE, related_name=\"contents\"\n    )",
        "detail": "contents.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "courses.migrations.0001_initial",
        "description": "courses.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Course',\n            fields=[\n                ('id', models.UUIDField(default=uuid.UUID('096b7fff-7010-4d09-8ddb-fe57cd29b8c7'), editable=False, primary_key=True, serialize=False)),",
        "detail": "courses.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "courses.migrations.0002_initial",
        "description": "courses.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('courses', '0001_initial'),\n        ('students_courses', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='course',",
        "detail": "courses.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "CoursesConfig",
        "kind": 6,
        "importPath": "courses.apps",
        "description": "courses.apps",
        "peekOfCode": "class CoursesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'courses'",
        "detail": "courses.apps",
        "documentation": {}
    },
    {
        "label": "StatusChoice",
        "kind": 6,
        "importPath": "courses.models",
        "description": "courses.models",
        "peekOfCode": "class StatusChoice(models.TextChoices):\n    NOT_STARTED = \"not started\"\n    IN_PROGRESS = \"in progress\"\n    FINISHED = \"finished\"\nclass Course(models.Model):\n    id = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4())\n    name = models.CharField(max_length=100, unique=True)\n    status = models.CharField(\n        max_length=20, choices=StatusChoice.choices, default=StatusChoice.NOT_STARTED\n    )",
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "courses.models",
        "description": "courses.models",
        "peekOfCode": "class Course(models.Model):\n    id = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4())\n    name = models.CharField(max_length=100, unique=True)\n    status = models.CharField(\n        max_length=20, choices=StatusChoice.choices, default=StatusChoice.NOT_STARTED\n    )\n    start_date = models.DateTimeField(auto_now_add=True)\n    end_date = models.DateTimeField(auto_now_add=True)\n    instructor = models.ForeignKey(\n        \"accounts.Account\", on_delete=models.CASCADE, related_name=\"courses\"",
        "detail": "courses.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "students_courses.migrations.0001_initial",
        "description": "students_courses.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('courses', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='StudentCourse',\n            fields=[",
        "detail": "students_courses.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "StudentsCoursesConfig",
        "kind": 6,
        "importPath": "students_courses.apps",
        "description": "students_courses.apps",
        "peekOfCode": "class StudentsCoursesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'students_courses'",
        "detail": "students_courses.apps",
        "documentation": {}
    },
    {
        "label": "StatusChoice",
        "kind": 6,
        "importPath": "students_courses.models",
        "description": "students_courses.models",
        "peekOfCode": "class StatusChoice(models.TextChoices):\n    PENDING = \"pending\"\n    ACCEPTED = \"accepted\"\nclass StudentCourse(models.Model):\n    id = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4())\n    status = models.CharField(\n        max_length=20, choices=StatusChoice.choices, default=StatusChoice.PENDING\n    )\n    student = models.ForeignKey(\n        \"accounts.Account\", on_delete=models.CASCADE, related_name=\"students_courses\"",
        "detail": "students_courses.models",
        "documentation": {}
    },
    {
        "label": "StudentCourse",
        "kind": 6,
        "importPath": "students_courses.models",
        "description": "students_courses.models",
        "peekOfCode": "class StudentCourse(models.Model):\n    id = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4())\n    status = models.CharField(\n        max_length=20, choices=StatusChoice.choices, default=StatusChoice.PENDING\n    )\n    student = models.ForeignKey(\n        \"accounts.Account\", on_delete=models.CASCADE, related_name=\"students_courses\"\n    )\n    course = models.ForeignKey(\n        \"courses.Course\", on_delete=models.CASCADE, related_name=\"students_courses\"",
        "detail": "students_courses.models",
        "documentation": {}
    },
    {
        "label": "TestAccountModel",
        "kind": 6,
        "importPath": "tests.accounts.test_models",
        "description": "tests.accounts.test_models",
        "peekOfCode": "class TestAccountModel(TestCase):\n    def test_username_field(self):\n        expected = 150\n        result = Account._meta.get_field(\"username\").max_length\n        message = \"Atributo 'username' possui 'max_length' diferente do esperado.\"\n        self.assertEqual(expected, result, message)\n        result = Account._meta.get_field(\"username\").unique\n        message = \"Atributo 'username' não foi configurado como único.\"\n        self.assertTrue(result, message)\n        result = Account._meta.get_field(\"username\").null",
        "detail": "tests.accounts.test_models",
        "documentation": {}
    },
    {
        "label": "TestCreateAccountView",
        "kind": 6,
        "importPath": "tests.accounts.test_views",
        "description": "tests.accounts.test_views",
        "peekOfCode": "class TestCreateAccountView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/accounts/\"\n    def test_can_create_superuser_with_success(self):\n        expected = 201\n        url = self.BASE_URL\n        user_data = {\n            \"username\": \"bob\",\n            \"password\": \"1234\",",
        "detail": "tests.accounts.test_views",
        "documentation": {}
    },
    {
        "label": "TestLoginAccountView",
        "kind": 6,
        "importPath": "tests.accounts.test_views",
        "description": "tests.accounts.test_views",
        "peekOfCode": "class TestLoginAccountView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/login/\"\n    def test_login_with_incorrect_credentials(self):\n        URL = self.BASE_URL\n        account_data = {\n            \"username\": \"account_1111\",\n            \"password\": \"1111\",\n        }",
        "detail": "tests.accounts.test_views",
        "documentation": {}
    },
    {
        "label": "TestContentModel",
        "kind": 6,
        "importPath": "tests.contents.test_models",
        "description": "tests.contents.test_models",
        "peekOfCode": "class TestContentModel(TestCase):\n    def test_name_field(self):\n        expected = 150\n        result = Content._meta.get_field(\"name\").max_length\n        message = \"Atributo 'name' possui 'max_length' diferente do esperado.\"\n        self.assertEqual(expected, result, message)\n        result = Content._meta.get_field(\"name\").null\n        message = \"Atributo 'name' deve ser obrigatório.\"\n        self.assertFalse(result, message)\n    def test_content_field(self):",
        "detail": "tests.contents.test_models",
        "documentation": {}
    },
    {
        "label": "TestCreateContentView",
        "kind": 6,
        "importPath": "tests.contents.test_views",
        "description": "tests.contents.test_views",
        "peekOfCode": "class TestCreateContentView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/courses/{}/contents/\"\n        cls.superuser = baker.make(\"accounts.Account\", is_superuser=True)\n        cls.common_user = baker.make(\"accounts.Account\", is_superuser=False)\n        cls.superuser_token = str(\n            RefreshToken.for_user(cls.superuser).access_token,\n        )\n        cls.common_user_token = str(",
        "detail": "tests.contents.test_views",
        "documentation": {}
    },
    {
        "label": "TestRetrieveContentView",
        "kind": 6,
        "importPath": "tests.contents.test_views",
        "description": "tests.contents.test_views",
        "peekOfCode": "class TestRetrieveContentView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/courses/{}/contents/\"\n        cls.superuser = baker.make(\"accounts.Account\", is_superuser=True)\n        cls.common_user = baker.make(\"accounts.Account\", is_superuser=False)\n        cls.superuser_token = str(\n            RefreshToken.for_user(cls.superuser).access_token,\n        )\n        cls.common_user_token = str(",
        "detail": "tests.contents.test_views",
        "documentation": {}
    },
    {
        "label": "TestUpdateContentView",
        "kind": 6,
        "importPath": "tests.contents.test_views",
        "description": "tests.contents.test_views",
        "peekOfCode": "class TestUpdateContentView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/courses/{}/contents/\"\n        cls.superuser = baker.make(\"accounts.Account\", is_superuser=True)\n        cls.common_user = baker.make(\"accounts.Account\", is_superuser=False)\n        cls.superuser_token = str(\n            RefreshToken.for_user(cls.superuser).access_token,\n        )\n        cls.common_user_token = str(",
        "detail": "tests.contents.test_views",
        "documentation": {}
    },
    {
        "label": "TestDeleteContentView",
        "kind": 6,
        "importPath": "tests.contents.test_views",
        "description": "tests.contents.test_views",
        "peekOfCode": "class TestDeleteContentView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/courses/{}/contents/\"\n        cls.superuser = baker.make(\"accounts.Account\", is_superuser=True)\n        cls.common_user = baker.make(\"accounts.Account\", is_superuser=False)\n        cls.superuser_token = str(\n            RefreshToken.for_user(cls.superuser).access_token,\n        )\n        cls.common_user_token = str(",
        "detail": "tests.contents.test_views",
        "documentation": {}
    },
    {
        "label": "TestCourseModel",
        "kind": 6,
        "importPath": "tests.courses.test_models",
        "description": "tests.courses.test_models",
        "peekOfCode": "class TestCourseModel(TestCase):\n    def test_name_field(self):\n        expected = 100\n        result = Course._meta.get_field(\"name\").max_length\n        message = \"Atributo 'name' possui 'max_length' diferente do esperado.\"\n        self.assertEqual(expected, result, message)\n        result = Course._meta.get_field(\"name\").unique\n        message = \"Atributo 'name' não foi configurado como único.\"\n        self.assertTrue(result, message)\n        result = Course._meta.get_field(\"name\").null",
        "detail": "tests.courses.test_models",
        "documentation": {}
    },
    {
        "label": "TestRelationshipTest",
        "kind": 6,
        "importPath": "tests.courses.test_models",
        "description": "tests.courses.test_models",
        "peekOfCode": "class TestRelationshipTest(TestCase):\n    def test_one_to_many_between_account_course(self):\n        result = Course._meta.get_field(\"instructor\")\n        message = \"Atributo 'instructor' do relacionamento 1:N não foi declarado corretamente.\"\n        self.assertIsInstance(result, ForeignKey, message)\n    def test_many_to_many_between_account_course(self):\n        result = Course._meta.get_field(\"students\")\n        message = (\n            \"Relacionamento N:N não foi declarado corretamente.\"\n            \"O comportamento esperado é: os cursos terão a chave 'students' \"",
        "detail": "tests.courses.test_models",
        "documentation": {}
    },
    {
        "label": "TestCreateCourseView",
        "kind": 6,
        "importPath": "tests.courses.test_views",
        "description": "tests.courses.test_views",
        "peekOfCode": "class TestCreateCourseView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/courses/\"\n        cls.superuser = baker.make(\"accounts.Account\", is_superuser=True)\n        cls.common_user = baker.make(\"accounts.Account\", is_superuser=False)\n        cls.superuser_token = str(\n            RefreshToken.for_user(cls.superuser).access_token,\n        )\n        cls.common_user_token = str(",
        "detail": "tests.courses.test_views",
        "documentation": {}
    },
    {
        "label": "TestReadCourseView",
        "kind": 6,
        "importPath": "tests.courses.test_views",
        "description": "tests.courses.test_views",
        "peekOfCode": "class TestReadCourseView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/courses/\"\n        cls.superuser = baker.make(\"accounts.Account\", is_superuser=True)\n        cls.common_user = baker.make(\"accounts.Account\", is_superuser=False)\n        cls.superuser_token = str(\n            RefreshToken.for_user(cls.superuser).access_token,\n        )\n        cls.common_user_token = str(",
        "detail": "tests.courses.test_views",
        "documentation": {}
    },
    {
        "label": "TestDeleteCourseView",
        "kind": 6,
        "importPath": "tests.courses.test_views",
        "description": "tests.courses.test_views",
        "peekOfCode": "class TestDeleteCourseView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/courses/\"\n        cls.superuser = baker.make(\"accounts.Account\", is_superuser=True)\n        cls.common_user = baker.make(\"accounts.Account\", is_superuser=False)\n        cls.superuser_token = str(\n            RefreshToken.for_user(cls.superuser).access_token,\n        )\n        cls.common_user_token = str(",
        "detail": "tests.courses.test_views",
        "documentation": {}
    },
    {
        "label": "TestRetrieveCourseView",
        "kind": 6,
        "importPath": "tests.courses.test_views",
        "description": "tests.courses.test_views",
        "peekOfCode": "class TestRetrieveCourseView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/courses/\"\n        cls.superuser = baker.make(\"accounts.Account\", is_superuser=True)\n        cls.common_user = baker.make(\"accounts.Account\", is_superuser=False)\n        cls.superuser_token = str(\n            RefreshToken.for_user(cls.superuser).access_token,\n        )\n        cls.common_user_token = str(",
        "detail": "tests.courses.test_views",
        "documentation": {}
    },
    {
        "label": "TestUpdateCourseView",
        "kind": 6,
        "importPath": "tests.courses.test_views",
        "description": "tests.courses.test_views",
        "peekOfCode": "class TestUpdateCourseView(APITestCase):\n    @classmethod\n    def setUpTestData(cls) -> None:\n        cls.BASE_URL = \"/api/courses/\"\n        cls.superuser = baker.make(\"accounts.Account\", is_superuser=True)\n        cls.common_user = baker.make(\"accounts.Account\", is_superuser=False)\n        cls.superuser_token = str(\n            RefreshToken.for_user(cls.superuser).access_token,\n        )\n        cls.common_user_token = str(",
        "detail": "tests.courses.test_views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "_core.asgi",
        "description": "_core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "_core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\ndotenv.load_dotenv()\nSECRET_KEY = os.getenv(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "SECRET_KEY = os.getenv(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"accounts\",\n    \"courses\",",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"_core.urls\"",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "ROOT_URLCONF = \"_core.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "WSGI_APPLICATION = \"_core.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv(\"POSTGRES_DB\"),\n        \"USER\": os.getenv(\"POSTGRES_USER\"),\n        \"PASSWORD\": os.getenv(\"POSTGRES_PASSWORD\"),\n        \"HOST\": \"127.0.0.1\",",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv(\"POSTGRES_DB\"),\n        \"USER\": os.getenv(\"POSTGRES_USER\"),\n        \"PASSWORD\": os.getenv(\"POSTGRES_PASSWORD\"),\n        \"HOST\": \"127.0.0.1\",\n        \"PORT\": 5432,\n    }\n}",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.Account\"",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.Account\"",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.Account\"",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.Account\"",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.Account\"",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "_core.settings",
        "description": "_core.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"accounts.Account\"",
        "detail": "_core.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "_core.urls",
        "description": "_core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('accounts.urls'))\n]",
        "detail": "_core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "_core.wsgi",
        "description": "_core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "_core.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', '_core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]